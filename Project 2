//InterestPlan.h
#ifndefINTERESTPLAN_H
#include<vector>
#include<iostream>
#include<iomanip>

using namespace std;
class InterestPlan {
    public:
    //Default constroctur is sufficient
    //setData
    void SetData(int,double,double,double);
    void SetDeposit(double);
    void InterestCalculated();
    void Message1();
    void Message2();
    void ShowResult();
private:
    void DisplayedMessage();
    int numYears = 0;
    double YearlyInterest = 0;
    double startingAmount = 0;
    double deposit = 0;
    vector<double> interestList;
    vector<double> sumList;
};

//InterestPlan.cpp
#include "InterestPlan.h"

void InterestPlan::SetData(int numYears,double YearlyInterest,double startingAmount,double deposit) {
    this->numYears = numYears;
    this->YearlyInterest = YearlyInterest;
    this->startingAmount = startingAmount;
    this->deposit = deposit;
    
}
void InterestPlan::SetDeposit(double deposit) {
    this->deposit = deposit;
    }
void InterestPlan::InterestCalculated() {
    
    //Declaration of Variables
    int currentMonth;
    int AllMonths;
    double AllInterest;
    double total;
    double InterestPerMonth;
    double DepositPerMonth;
    
    
    currentMonth = 1; 
    AllMonths = numYears * 12;
    total = startingAmount;
    AllInterest = 0;
    InterestPerMonth = (YearlyInterest / 100) / 12;
    DepositPerMonth = deposit;
    interestList.clear();
    sumList.clear();
    
    //loop per month that passes
    while(currentMonth <= AllMonths) {
        total += DepositPerMonth;
        AllInterest = total * InterestPerMonth;
        interestList.push_back(AllInterest);
        total += AllInterest;
        sumList.push_back(total);
        currentMonth++;
    }
}

voidInterestPlan::DisplayedMessage() {
    cout<<setw(10)<<left<<"Year"<<flush;
    cout<<setw(20)<<left<<"Balance"<<flush;
    cout<<setw(10)<<right<<"Total Accumulated Interest"<<endl;
}

voidInterestPlan::Message1() {
    cout<<"Balance and Interest with extra monthly deposits"<< endl;
    this->DisplayedMessage();
}

voidInterestPlan::Message2() {
    cout<<"Balance and Interest without extra monthly deposits"<<endl;
    this->DisplayedMessage();
}

//Interest Plan 

voidInterestPlan::ShowResult() {
    doubleinterestSum = 0;
    for(inti = 1; i <= numYears; i++) {
        cout<<setw(10)<<left<<i<<flush;
        cout<<setw(20)<<left<<sumList.at((i * 12) - 1)<<flush;
        for(intj = (i - 1) * 12; j <= (i * 12) - 1; j++) {
            interestSum += interestList.at(j);
        }
        cout<<setw(10)<<left<<interestSum<<endl;
        cout<<endl;
    }
}

//main.cpp
#include<string>
#include<cctype>
#include"InterestPlan.h"

using namespace std;

bool continueLoop(stringprompt);

void dataInput(InterestPlan*plan);

int main() {
    cout << "Welcome to the Airgead Banking App" << endl;
    cout << endl;
    system("pause");
    cout << endl;
    InterestPlan* plan =newInterestPlan;
    bool keepGoing =true;
    while(keepGoing) {
        dataInput(plan);
        plan->Message1();
        plan->InterestCalculated();
        plan->ShowResult();
        plan->SetDeposit(0);
        plan->Message2();
        plan->InterestCalculated();
        plan->ShowResult();
        keepGoing = continueLoop("Exit? (y for yes) ");
    }
    return0;
}
bool continueLoop(stringprompt) {
    bool keepGoing =true;
    string user_continue;
    cout << prompt;
    cin>>user_continue;
    if(tolower(user_continue.at(0)) =='y') {
        keepGoing =false;
    }
    cout<<endl;
    return keepGoing;
}
voiddataInput(InterestPlan* plan) {
    int numYears;
    double YearlyInterest;
    double startingAmount;
    double deposit;
    bool keepGoing =true;
    string user_continue;
    while (keepGoing) {
        try{
            cout<<"Initial Investment Amount: "<<flush;
            cin>>startingAmount;
            if(startingAmount < 0) {
                throwruntime_error("Starting Amount must greater than 0.");
            }
            cout<<"Monthly Deposit: "<<flush;
            cin>>deposit;
            if(deposit < 0) {
                throw runtime_error("Monthly Deposit must be greater than 0");
            }
            cout<<"Annual Interest (%): "<<flush;
            cin>>YearlyInterest;
            if(YearlyInterest < 0) {
                throw runtime_error("Annual Interest must be greater than 0");
            }
            cout<<"Number of years: "<<flush;
            cin>>numYears;
            if(numYears < 1) {
                throw runtime_error("Number of Years must be 1 or greater.");
            }
            keepGoing = continueLoop("Continue? (y for yes) ");
        }
        catch(runtime_error& error) {
            cout<<"ERROR: "<<error.what()<<endl;
            cout<<endl;
        }
}

plan->SetData(numYears, YearlyInterest, startingAmount, deposit);
}